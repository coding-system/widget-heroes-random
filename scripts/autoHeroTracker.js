// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const PLAYER_ID = 1892794016;
const START_MATCH_ID = 8316568444;
const CHECK_INTERVAL_MINUTES = 30;
const OPENDOTA_API_BASE = "https://api.opendota.com/api";

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≥–µ—Ä–æ–µ–≤
class AutoHeroTracker {
   constructor() {
      this.lastCheckedMatchId = START_MATCH_ID;
      this.autoBannedHeroes = [];
      this.isRunning = false;
      this.intervalId = null;
   }

   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
   async init() {
      console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutoHeroTracker...");
      await this.loadAutoBannedHeroes();
      await this.checkForNewMatches();
      this.startPeriodicCheck();
      console.log("‚úÖ AutoHeroTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
   }

   // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
   async loadAutoBannedHeroes() {
      try {
         const savedData = localStorage.getItem("autoBannedHeroes");
         if (savedData) {
            const data = JSON.parse(savedData);
            this.autoBannedHeroes = data.autoBannedHeroes || [];
            console.log(
               `üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.autoBannedHeroes.length} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –∏–∑ localStorage`
            );
         } else {
            console.log(
               "üìã –î–∞–Ω–Ω—ã–µ –≤ localStorage –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            );
            this.autoBannedHeroes = [];
         }
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ localStorage:", error);
         this.autoBannedHeroes = [];
      }
   }

   // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
   async saveAutoBannedHeroes() {
      try {
         const data = {
            autoBannedHeroes: this.autoBannedHeroes,
         };

         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
         localStorage.setItem("autoBannedHeroes", JSON.stringify(data));
         console.log(
            "üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –≥–µ—Ä–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage"
         );
         console.log(
            "üìä –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤:",
            this.autoBannedHeroes
         );
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:", error);
      }
   }

   // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∏–≥—Ä–æ–∫–∞
   async getPlayerMatches() {
      try {
         const url = `${OPENDOTA_API_BASE}/players/${PLAYER_ID}/matches`;
         console.log(`üîç –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∏–≥—Ä–æ–∫–∞ ${PLAYER_ID}...`);

         const response = await fetch(url);
         if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
         }

         const matches = await response.json();
         console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π`);
         return matches;
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:", error);
         return [];
      }
   }

   // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞
   async getMatchDetails(matchId) {
      try {
         const url = `${OPENDOTA_API_BASE}/matches/${matchId}`;
         const response = await fetch(url);
         if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
         }

         const matchDetails = await response.json();
         return matchDetails;
      } catch (error) {
         console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞ ${matchId}:`,
            error
         );
         return null;
      }
   }

   // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è –ø–æ ID
   getHeroName(heroId) {
      const heroNames = {
         1: "Anti-Mage",
         2: "Axe",
         3: "Bane",
         4: "Bloodseeker",
         5: "Crystal Maiden",
         6: "Drow Ranger",
         7: "Earthshaker",
         8: "Juggernaut",
         9: "Mirana",
         10: "Morphling",
         11: "Shadow Fiend",
         12: "Phantom Lancer",
         13: "Puck",
         14: "Pudge",
         15: "Razor",
         16: "Sand King",
         17: "Storm Spirit",
         18: "Sven",
         19: "Tiny",
         20: "Vengeful Spirit",
         21: "Windranger",
         22: "Zeus",
         23: "Kunkka",
         25: "Lina",
         26: "Lion",
         27: "Shadow Shaman",
         28: "Slardar",
         29: "Tidehunter",
         30: "Witch Doctor",
         31: "Lich",
         32: "Riki",
         33: "Enigma",
         34: "Tinker",
         35: "Sniper",
         36: "Necrophos",
         37: "Warlock",
         38: "Beastmaster",
         39: "Queen of Pain",
         40: "Venomancer",
         41: "Faceless Void",
         42: "Wraith King",
         43: "Death Prophet",
         44: "Phantom Assassin",
         45: "Pugna",
         46: "Templar Assassin",
         47: "Viper",
         48: "Luna",
         49: "Dragon Knight",
         50: "Dazzle",
         51: "Clockwerk",
         52: "Leshrac",
         53: "Nature's Prophet",
         54: "Lifestealer",
         55: "Dark Seer",
         56: "Clinkz",
         57: "Omniknight",
         58: "Enchantress",
         59: "Huskar",
         60: "Night Stalker",
         61: "Broodmother",
         62: "Bounty Hunter",
         63: "Weaver",
         64: "Jakiro",
         65: "Batrider",
         66: "Chen",
         67: "Spectre",
         68: "Ancient Apparition",
         69: "Doom",
         70: "Ursa",
         71: "Spirit Breaker",
         72: "Gyrocopter",
         73: "Alchemist",
         74: "Invoker",
         75: "Silencer",
         76: "Outworld Destroyer",
         77: "Lycan",
         78: "Brewmaster",
         79: "Shadow Demon",
         80: "Lone Druid",
         81: "Chaos Knight",
         82: "Meepo",
         83: "Treant Protector",
         84: "Ogre Magi",
         85: "Undying",
         86: "Rubick",
         87: "Disruptor",
         88: "Nyx Assassin",
         89: "Naga Siren",
         90: "Keeper of the Light",
         91: "IO",
         92: "Visage",
         93: "Slark",
         94: "Medusa",
         95: "Troll Warlord",
         96: "Centaur Warrunner",
         97: "Magnus",
         98: "Timbersaw",
         99: "Bristleback",
         100: "Tusk",
         101: "Skywrath Mage",
         102: "Abaddon",
         103: "Elder Titan",
         104: "Legion Commander",
         105: "Techies",
         106: "Ember Spirit",
         107: "Earth Spirit",
         108: "Abyssal Underlord",
         109: "Terrorblade",
         110: "Phoenix",
         111: "Oracle",
         112: "Winter Wyvern",
         113: "Arc Warden",
         114: "Monkey King",
         119: "Dark Willow",
         120: "Pangolier",
         121: "Grimstroke",
         123: "Hoodwink",
         126: "Void Spirit",
         128: "Snapfire",
         129: "Mars",
         135: "Dawnbreaker",
         136: "Marci",
         137: "Primal Beast",
         138: "Muerta",
         139: "Ringmaster",
      };

      return heroNames[heroId] || `Unknown Hero (${heroId})`;
   }

   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤
   async checkForNewMatches() {
      try {
         console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π...");
         const matches = await this.getPlayerMatches();

         if (matches.length === 0) {
            console.log("üì≠ –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
         }

         // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ—Å–ª–µ START_MATCH_ID (–Ω–µ –≤–∫–ª—é—á–∞—è –µ–≥–æ)
         const newMatches = matches.filter(
            (match) =>
               match.match_id > START_MATCH_ID &&
               match.match_id > this.lastCheckedMatchId
         );

         if (newMatches.length === 0) {
            console.log("üì≠ –ù–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            return;
         }

         console.log(`üéÆ –ù–∞–π–¥–µ–Ω–æ ${newMatches.length} –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π`);

         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
         await this.processMatchesLocally(newMatches);

         // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
         if (newMatches.length > 0) {
            this.lastCheckedMatchId = Math.max(
               ...newMatches.map((m) => m.match_id)
            );
         }

         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
         await this.saveAutoBannedHeroes();
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π:", error);
      }
   }

   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–µ–π –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API)
   async processMatchesLocally(matches) {
      try {
         console.log("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–µ–π –ª–æ–∫–∞–ª—å–Ω–æ...");

         for (const match of matches) {
            console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–∞ ${match.match_id}...`);

            // –ü–æ–ª—É—á–∞–µ–º –≥–µ—Ä–æ—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            const heroId = match.hero_id;
            if (heroId) {
               const heroName = this.getHeroName(heroId);

               // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ—Ä–æ—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
               if (!this.autoBannedHeroes.includes(heroName)) {
                  this.autoBannedHeroes.push(heroName);
                  console.log(
                     `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: ${heroName} (–∏–∑ –º–∞—Ç—á–∞ ${match.match_id})`
                  );
               } else {
                  console.log(`‚ÑπÔ∏è –ì–µ—Ä–æ–π ${heroName} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ`);
               }
            } else {
               console.log(`‚ö†Ô∏è ID –≥–µ—Ä–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ç—á–µ ${match.match_id}`);
            }
         }
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–µ–π:", error);
      }
   }

   // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –∏–≥—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
   async getAllPlayerMatchesWithDetails() {
      try {
         console.log("üîç –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –∏–≥—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏...");

         // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
         const matches = await this.getPlayerMatches();

         if (matches.length === 0) {
            console.log("üì≠ –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return [];
         }

         console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π`);

         // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ—Å–ª–µ START_MATCH_ID (–Ω–µ –≤–∫–ª—é—á–∞—è –µ–≥–æ)
         const relevantMatches = matches.filter(
            (match) => match.match_id > START_MATCH_ID
         );

         console.log(
            `üéØ –ù–∞–π–¥–µ–Ω–æ ${relevantMatches.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø–æ—Å–ª–µ ${START_MATCH_ID}`
         );

         // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
         const matchIds = relevantMatches.map((match) => match.match_id);
         const matchDetails = await this.getMultipleMatchDetails(matchIds);

         return matchDetails;
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π —Å –¥–µ—Ç–∞–ª—è–º–∏:", error);
         return [];
      }
   }

   // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç—á–µ–π
   async getMultipleMatchDetails(matchIds) {
      try {
         console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π ${matchIds.length} –º–∞—Ç—á–µ–π...`);

         const matchDetails = [];

         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10 —à—Ç—É–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
         const batchSize = 10;
         for (let i = 0; i < matchIds.length; i += batchSize) {
            const batch = matchIds.slice(i, i + batchSize);
            console.log(
               `üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${
                  Math.floor(i / batchSize) + 1
               }/${Math.ceil(matchIds.length / batchSize)}`
            );

            const batchPromises = batch.map((matchId) =>
               this.getMatchDetails(matchId)
            );
            const batchResults = await Promise.allSettled(batchPromises);

            batchResults.forEach((result, index) => {
               if (result.status === "fulfilled" && result.value) {
                  matchDetails.push(result.value);
               } else {
                  console.log(
                     `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞ ${batch[index]}`
                  );
               }
            });

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if (i + batchSize < matchIds.length) {
               await new Promise((resolve) => setTimeout(resolve, 1000));
            }
         }

         console.log(
            `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π ${matchDetails.length} –∏–∑ ${matchIds.length} –º–∞—Ç—á–µ–π`
         );
         return matchDetails;
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–µ–π:", error);
         return [];
      }
   }

   // –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   async processAllMatchesEfficiently() {
      try {
         console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –º–∞—Ç—á–µ–π...");

         // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –∏–≥—Ä–æ–∫–∞
         const matches = await this.getPlayerMatches();

         if (matches.length === 0) {
            console.log("üì≠ –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
         }

         console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π`);

         // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ—Å–ª–µ START_MATCH_ID (–Ω–µ –≤–∫–ª—é—á–∞—è –µ–≥–æ)
         const relevantMatches = matches.filter(
            (match) => match.match_id > START_MATCH_ID
         );

         console.log(
            `üéØ –ù–∞–π–¥–µ–Ω–æ ${relevantMatches.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø–æ—Å–ª–µ ${START_MATCH_ID}`
         );

         if (relevantMatches.length === 0) {
            console.log("üì≠ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            return;
         }

         // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π
         const matchIds = relevantMatches.map((match) => match.match_id);
         const matchDetails = await this.getMultipleMatchDetails(matchIds);

         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –ª–æ–∫–∞–ª—å–Ω–æ
         let newHeroesCount = 0;

         for (const matchDetail of matchDetails) {
            if (!matchDetail || !matchDetail.players) {
               continue;
            }

            // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ
            const playerInMatch = matchDetail.players.find(
               (player) => player.account_id === PLAYER_ID
            );

            if (!playerInMatch) {
               continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥–µ—Ä–æ—è
            const heroName = this.getHeroName(playerInMatch.hero_id);

            // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ—Ä–æ—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
            if (!this.autoBannedHeroes.includes(heroName)) {
               this.autoBannedHeroes.push(heroName);
               newHeroesCount++;
               console.log(
                  `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: ${heroName} (–∏–∑ –º–∞—Ç—á–∞ ${matchDetail.match_id})`
               );
            }
         }

         // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
         if (relevantMatches.length > 0) {
            this.lastCheckedMatchId = Math.max(
               ...relevantMatches.map((m) => m.match_id)
            );
         }

         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
         await this.saveAutoBannedHeroes();

         console.log(
            `üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ ${newHeroesCount} –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤`
         );
         console.log(
            `üìä –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤: ${this.autoBannedHeroes.length}`
         );
      } catch (error) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–µ–π:", error);
      }
   }

   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   async processMatch(match) {
      try {
         console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–∞ ${match.match_id}...`);

         const matchDetails = await this.getMatchDetails(match.match_id);
         if (!matchDetails) {
            console.log(
               `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞ ${match.match_id}`
            );
            return;
         }

         // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ
         const playerInMatch = matchDetails.players.find(
            (player) => player.account_id === PLAYER_ID
         );

         if (!playerInMatch) {
            console.log(
               `‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${PLAYER_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ç—á–µ ${match.match_id}`
            );
            return;
         }

         // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥–µ—Ä–æ—è
         const heroName = this.getHeroName(playerInMatch.hero_id);

         // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ—Ä–æ—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
         if (!this.autoBannedHeroes.includes(heroName)) {
            this.autoBannedHeroes.push(heroName);
            console.log(
               `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: ${heroName} (–∏–∑ –º–∞—Ç—á–∞ ${match.match_id})`
            );
         } else {
            console.log(`‚ÑπÔ∏è –ì–µ—Ä–æ–π ${heroName} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ`);
         }
      } catch (error) {
         console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ ${match.match_id}:`,
            error
         );
      }
   }

   // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   startPeriodicCheck() {
      if (this.isRunning) {
         console.log("‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
         return;
      }

      this.isRunning = true;
      const intervalMs = CHECK_INTERVAL_MINUTES * 60 * 1000;

      console.log(
         `‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ ${CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`
      );

      this.intervalId = setInterval(async () => {
         console.log("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...");
         await this.checkForNewMatches();
      }, intervalMs);
   }

   // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   stopPeriodicCheck() {
      if (this.intervalId) {
         clearInterval(this.intervalId);
         this.intervalId = null;
         this.isRunning = false;
         console.log("‚èπÔ∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
      }
   }

   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
   getAutoBannedHeroes() {
      return this.autoBannedHeroes;
   }

   // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
   clearAutoBannedHeroes() {
      this.autoBannedHeroes = [];
      this.saveAutoBannedHeroes();
      console.log("üóëÔ∏è –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –æ—á–∏—â–µ–Ω");
   }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç—Ä–µ–∫–µ—Ä–∞
const autoHeroTracker = new AutoHeroTracker();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.autoHeroTracker = autoHeroTracker;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", async () => {
   console.log("üéÆ AutoHeroTracker –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
   await autoHeroTracker.init();

   // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å
   const heroes = autoHeroTracker.getAutoBannedHeroes();
   console.log(
      "üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –≥–µ—Ä–æ–∏ (—Å –º–∞—Ç—á–∞ 8316568444):",
      heroes
   );
   console.log("üìä –í—Å–µ–≥–æ –≥–µ—Ä–æ–µ–≤ –≤ —Å–ø–∏—Å–∫–µ:", heroes.length);
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
window.manualCheck = () => autoHeroTracker.checkForNewMatches();
window.getAutoBannedHeroes = () => autoHeroTracker.getAutoBannedHeroes();
window.clearAutoBannedHeroes = () => autoHeroTracker.clearAutoBannedHeroes();
window.stopAutoCheck = () => autoHeroTracker.stopPeriodicCheck();
window.startAutoCheck = () => autoHeroTracker.startPeriodicCheck();

// –ù–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
window.processAllMatchesEfficiently = () =>
   autoHeroTracker.processAllMatchesEfficiently();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
window.exportAutoBannedData = () => {
   const data = localStorage.getItem("autoBannedHeroes");
   if (data) {
      console.log("üìÑ –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:");
      console.log(JSON.parse(data));
   } else {
      console.log("üì≠ –î–∞–Ω–Ω—ã–µ –≤ localStorage –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
   }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ localStorage
window.clearLocalStorage = () => {
   localStorage.removeItem("autoBannedHeroes");
   console.log("üóëÔ∏è localStorage –æ—á–∏—â–µ–Ω");
};
